const {
    Telegraf,
    session,
    Context,
    Stage,
    Markup,
    Extra,
    Scenes,
    Composer} = require('telegraf');

const I18n = require('telegraf-i18n');
const path = require("path");
const { enter, leave } = Scenes.Stage;

const i18n = new I18n({
    directory: path.resolve(__dirname, '../locales'),
    sessionName: 'session',
    useSession: true,
});

const languageSelect = Markup.keyboard([['üá∑üá∫ - –ù–∞—á–∞—Ç—å', 'üá∫üá¶ - –ü–æ—á–∞—Ç–∏', 'üá∫üá∏ - Start']]);

const setLanguage = new Scenes.BaseScene('setLanguage');

setLanguage.enter(ctx => {
    return ctx.reply('–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:', languageSelect.oneTime().resize());
})

setLanguage.use(i18n.middleware());
setLanguage.use(session());


setLanguage.hears('üá∑üá∫ - –ù–∞—á–∞—Ç—å', (ctx) => {
    ctx.i18n.locale('ru');
    ctx.scene.session.local = 'ru';
    ctx.reply('üá∑üá∫' + ctx.i18n.t('lang'));
    return ctx.scene.leave();
});


setLanguage.hears('üá∫üá∏ - Start', (ctx) => {
    ctx.i18n.locale('en');
    ctx.scene.session.local = 'en'
    ctx.reply('üá∫üá∏ ' + ctx.i18n.t('lang'));
    return ctx.scene.leave();
});

setLanguage.hears('üá∫üá¶ - –ü–æ—á–∞—Ç–∏',  (ctx) => {
    ctx.i18n.locale('ua');
    ctx.scene.session.local = 'ua'
    ctx.reply('üá∫üá¶ ' + ctx.i18n.t('lang'));
    return ctx.scene.leave();
});

setLanguage.on('text',  (ctx) => {
    ctx.reply('–õ—É—á—à–µ –≤—ã–±–µ—Ä–∏ —è–∑—ã–∫!');
})



module.exports = {
    setLanguage,
}